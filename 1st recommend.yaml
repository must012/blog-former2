AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: "CFn Template for Former2 Test"
Parameters:
  AllowedCIDR:
    Description: "cidr to allow ssh access to ec2"
    Type: String
    Default: "111.111.111.111/24"
Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0f9816f78187c68fb"
      InstanceType: "t2.micro"
      KeyName: "publicTestKey"
      AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref EC2Subnet2
      EbsOptimized: false
      SecurityGroupIds:
        - !Ref EC2SecurityGroup2
      SourceDestCheck: false # Disable source/destination checking for increased security
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: true # Enable EBS volume encryption for data at rest
            VolumeSize: 8
            VolumeType: "gp3"
            DeleteOnTermination: true
      Tags:
        - Key: "prj"
          Value: "former"
        - Key: "Name"
          Value: "test1"
      HibernationOptions:
        Configured: false
      EnclaveOptions:
        Enabled: false

  EC2Instance2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0f9816f78187c68fb"
      InstanceType: "t2.micro"
      KeyName: "publicTestKey"
      AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
      Tenancy: "default"
      SubnetId: !Ref EC2Subnet
      EbsOptimized: false
      SecurityGroupIds:
        - !Ref EC2SecurityGroup2
      SourceDestCheck: false # Disable source/destination checking for increased security
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: true # Enable EBS volume encryption for data at rest
            VolumeSize: 8
            VolumeType: "gp3"
            DeleteOnTermination: true
      Tags:
        - Key: "Name"
          Value: "test2"
        - Key: "prj"
          Value: "former"
      HibernationOptions:
        Configured: false
      EnclaveOptions:
        Enabled: false

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "former-rds"
      GroupName: "former-rds"
      Tags:
        - Key: "prj"
          Value: "former"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - CidrIp: !GetAtt EC2VPC.CidrBlock
          FromPort: !GetAtt RDSDBInstance.Endpoint.Port
          IpProtocol: "tcp"
          ToPort: !GetAtt RDSDBInstance.Endpoint.Port
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

  EC2SecurityGroup2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "formertest-ec2"
      GroupName: "formertest-ec2"
      Tags:
        - Key: "prj"
          Value: "former"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - CidrIp: !Ref AllowedCIDR
          FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
        - CidrIp: !Ref AllowedCIDR
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: "prj"
          Value: "former"

  EC2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-2a"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "prj"
          Value: "former"

  EC2Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-2c"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "prj"
          Value: "former"

  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "prj"
          Value: "former"

  EC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref EC2VPC
      InternetGatewayId: !Ref EC2InternetGateway

  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "prj"
          Value: "former"

  EC2RouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "prj"
          Value: "former"

  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway

  EC2Route2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway

  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: "mysql"
      EngineVersion: "5.7"
      DBInstanceIdentifier: "mydbinstance"
      AllocatedStorage: 20
      DBInstanceClass: "db.t2.micro"
      MasterUsername: "admin"
      MasterUserPassword: "password123"
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup
      MultiAZ: false
      StorageEncrypted: true # Enable RDS storage encryption for data at rest
      Tags:
        - Key: "prj"
          Value: "former"

Outputs:
  EC2Instance1IP:
    Value: !Ref EC2Instance
  EC2Instance2IP:
    Value: !Ref EC2Instance2
  RDSDBEndpoint:
    Value: !GetAtt RDSDBInstance.Endpoint.Address
